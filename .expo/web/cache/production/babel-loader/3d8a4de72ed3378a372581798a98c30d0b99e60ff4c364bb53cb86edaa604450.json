{"ast":null,"code":"var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}module.exports=function(app,webData){var webApp=\"vitAI\";var _require=require('express-validator'),check=_require.check,validationResult=_require.validationResult;var rateLimit=require('express-rate-limit');var express=require('express');var request=require('request');var bodyParser=require('body-parser');app.use(bodyParser.urlencoded({extended:true}));var limiter=rateLimit({windowMs:15*60*1000,max:100});app.use(limiter);app.get('/',function(req,res){res.render('index',{webApp:webApp,conversationId:''});});app.get('/about',function(req,res){res.render('about.ejs',webData);});app.get('/search',function(req,res){res.render(\"search.ejs\",webData);});app.get('/register',function(req,res){res.render('register.ejs',webData);});app.post('/registered',[check('email').isEmail()],[check('password').isLength({min:8}).withMessage('Password must be at least 8 characters long.')],function(req,res){var errors=validationResult(req);if(!errors.isEmpty()){res.redirect('./register');}else{var existingUserQuery=\"SELECT * FROM userdetails WHERE username = ?\";db.query(existingUserQuery,[req.sanitize(req.body.username)],function(err,result){if(err){return res.status(500).send('Internal Server Error');}if(result.length>0){return res.send('Username already exists. Please choose another username.');}var bcrypt=require('bcrypt');var saltRounds=10;var plainPassword=req.sanitize(req.body.password);bcrypt.hash(plainPassword,saltRounds,function(err,hashedPassword){var sqlquery=\"INSERT INTO userdetails (username, first_name, last_name, email, hashedPassword) VALUES (?,?,?,?,?)\";var newrecord=[req.sanitize(req.body.username),req.sanitize(req.body.first),req.sanitize(req.body.last),req.sanitize(req.body.email),hashedPassword];db.query(sqlquery,newrecord,function(err,result){if(err){return console.error(err.message);}else{var successMessage='Hello '+req.sanitize(req.body.first)+' '+req.sanitize(req.body.last)+', you are now registered! We will send an email to '+req.body.email;res.send(successMessage+'<a href=\"./\">Home</a>');}});});});}});app.get('/login',function(req,res){res.render('login.ejs',webData);});app.post('/loggedin',function(req,res){var bcrypt=require('bcrypt');var username=req.sanitize(req.body.username);var enteredPassword=req.sanitize(req.body.password);req.session.userId=username;var sqlQuery=\"SELECT hashedPassword FROM userdetails WHERE username = ?\";db.query(sqlQuery,[username],function(err,result){if(err){return res.status(500).send('Internal Server Error');}if(result.length===0){return res.send('Login failed. User not found.');}var hashedPassword=result[0].hashedPassword;bcrypt.compare(enteredPassword,hashedPassword,function(err,result){if(err){return res.status(500).send('Internal Server Error');}else if(result===true){return res.send('Login successful. <a href=\"./\">Home</a>');}else{return res.send('Login failed. Incorrect password. <a href=\"./\">Home</a>');}});});});app.get('/logout',function(req,res){req.session.destroy(function(err){if(err){return res.redirect('./');}res.send('You are now logged out. <a href=\"./\">Home</a>');});});app.get('/chatBot',function(req,res){var options={method:'POST',url:'https://chatgpt-gpt4-ai-chatbot.p.rapidapi.com/ask',headers:{'content-type':'application/json','X-RapidAPI-Key':'f4b5e795e9msha6da9abb3a10e70p105f08jsnb021b319baea','X-RapidAPI-Host':'chatgpt-gpt4-ai-chatbot.p.rapidapi.com'},body:{query:'How to become rich?'},json:true};request(options,function(error,response,body){if(error){console.error('Error:',error);return res.status(500).send('Error occurred');}console.log(body);res.send(body);});});app.post('/sendQuery',function(req,res){var userQuery=req.body.userQuery;var conversationId=req.body.conversationId;var options={method:'POST',url:'https://chatgpt-gpt4-ai-chatbot.p.rapidapi.com/ask',headers:{'content-type':'application/json','X-RapidAPI-Key':'f4b5e795e9msha6da9abb3a10e70p105f08jsnb021b319baea','X-RapidAPI-Host':'chatgpt-gpt4-ai-chatbot.p.rapidapi.com'},body:_objectSpread({query:userQuery},conversationId&&{conversationId:conversationId}),json:true};request(options,function(error,response,body){if(error){console.error('Error:',error);return res.status(500).send('Error occurred');}console.log(\"API Response:\",body);res.render('index',{webApp:webApp,responseuserQuery:body.response,userQuery:userQuery,conversationId:body.conversationId||req.body.conversationId});});});};","map":{"version":3,"names":["module","exports","app","webData","webApp","_require","require","check","validationResult","rateLimit","express","request","bodyParser","use","urlencoded","extended","limiter","windowMs","max","get","req","res","render","conversationId","post","isEmail","isLength","min","withMessage","errors","isEmpty","redirect","existingUserQuery","db","query","sanitize","body","username","err","result","status","send","length","bcrypt","saltRounds","plainPassword","password","hash","hashedPassword","sqlquery","newrecord","first","last","email","console","error","message","successMessage","enteredPassword","session","userId","sqlQuery","compare","destroy","options","method","url","headers","json","response","log","userQuery","_objectSpread","responseuserQuery"],"sources":["C:/Users/Kamal/Documents/fyp/routes/main.js"],"sourcesContent":["module.exports = function (app, webData) {\r\n    const webApp = \"vitAI\";\r\n\r\n    // Importing necessary modules for validation, rate limiting, CORS and HTTP requests\r\n    const { check, validationResult } = require('express-validator');\r\n    const rateLimit = require('express-rate-limit');\r\n    const express = require('express');\r\n    const request = require('request');\r\n    const bodyParser = require('body-parser');\r\n    app.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n    // Setting up rate limiter to prevent abuse\r\n    const limiter = rateLimit({\r\n        windowMs: 15 * 60 * 1000, // 15 minutes\r\n        max: 100 // Limit each IP to 100 requests per windowMs\r\n    });\r\n    app.use(limiter);\r\n\r\n    app.get('/', function (req, res) {\r\n        res.render('index', { webApp: webApp, conversationId: '' });\r\n    });\r\n\r\n    // Route for about page\r\n    app.get('/about', function (req, res){\r\n        res.render('about.ejs', webData);\r\n    });\r\n\r\n    // Route for search page\r\n    app.get('/search', function (req, res){\r\n        res.render(\"search.ejs\", webData);\r\n    });\r\n\r\n    // Route for registration page\r\n    app.get('/register', function (req, res) {\r\n        res.render('register.ejs', webData);                                                                     \r\n    }); \r\n\r\n    // Route for processing registration with validation checks\r\n    app.post('/registered', \r\n        [check('email').isEmail()],\r\n        [check('password').isLength({ min: 8 }).withMessage('Password must be at least 8 characters long.')], \r\n        function (req, res) {\r\n            const errors = validationResult(req);\r\n            if (!errors.isEmpty()) {\r\n                res.redirect('./register'); \r\n            } else {\r\n                // Check for existing user and insert new user\r\n                let existingUserQuery = \"SELECT * FROM userdetails WHERE username = ?\";\r\n                db.query(existingUserQuery, [req.sanitize(req.body.username)], (err, result) => {\r\n                    if (err) {\r\n                        return res.status(500).send('Internal Server Error');\r\n                    }\r\n                    if (result.length > 0) {\r\n                        return res.send('Username already exists. Please choose another username.');\r\n                    }\r\n\r\n                    // Hashing password and saving user details\r\n                    const bcrypt = require('bcrypt');\r\n                    const saltRounds = 10;\r\n                    const plainPassword = req.sanitize(req.body.password);\r\n\r\n                    bcrypt.hash(plainPassword, saltRounds, function (err, hashedPassword) {\r\n                        let sqlquery = \"INSERT INTO userdetails (username, first_name, last_name, email, hashedPassword) VALUES (?,?,?,?,?)\";\r\n                        let newrecord = [req.sanitize(req.body.username), req.sanitize(req.body.first), req.sanitize(req.body.last), req.sanitize(req.body.email), hashedPassword];\r\n    \r\n                        db.query(sqlquery, newrecord, (err, result) => {\r\n                            if (err) {\r\n                                return console.error(err.message);\r\n                            } else {\r\n                                let successMessage = 'Hello ' + req.sanitize(req.body.first) + ' ' + req.sanitize(req.body.last) + ', you are now registered! We will send an email to ' + req.body.email;\r\n                                res.send(successMessage + '<a href=\"./\">Home</a>');\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            }   \r\n        }\r\n    );\r\n\r\n    // Route for login page\r\n    app.get('/login', function (req, res) {\r\n        res.render('login.ejs', webData);                                                                     \r\n    });\r\n\r\n    // Route for processing login\r\n    app.post('/loggedin',function (req, res) {\r\n        \r\n        // Validate login credentials\r\n        const bcrypt = require('bcrypt');\r\n        const username = req.sanitize(req.body.username);\r\n        const enteredPassword = req.sanitize(req.body.password);\r\n\r\n        // Set user session on successful login\r\n        req.session.userId = username;\r\n\r\n        // Fetch hashed password from database\r\n        let sqlQuery = \"SELECT hashedPassword FROM userdetails WHERE username = ?\";\r\n        db.query(sqlQuery, [username], (err, result) => {\r\n            if (err) {\r\n                return res.status(500).send('Internal Server Error');\r\n            }\r\n\r\n            if (result.length === 0) {\r\n                return res.send('Login failed. User not found.');\r\n            }\r\n\r\n            const hashedPassword = result[0].hashedPassword;\r\n\r\n            // Compare entered and stored hashed passwords\r\n            bcrypt.compare(enteredPassword, hashedPassword, function (err, result) {\r\n                if (err) {\r\n                    return res.status(500).send('Internal Server Error');\r\n                } else if (result === true) {\r\n                    return res.send('Login successful. <a href=\"./\">Home</a>');\r\n                } else {\r\n                    return res.send('Login failed. Incorrect password. <a href=\"./\">Home</a>');\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    // Route for logout\r\n    app.get('/logout', (req, res) => {\r\n        req.session.destroy(err => {\r\n            if (err) {\r\n                return res.redirect('./');\r\n            }\r\n            res.send('You are now logged out. <a href=\"./\">Home</a>');\r\n        });\r\n    });\r\n\r\n    app.get('/chatBot', function (req, res) {\r\n        const options = {\r\n            method: 'POST',\r\n            url: 'https://chatgpt-gpt4-ai-chatbot.p.rapidapi.com/ask',\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'X-RapidAPI-Key': 'f4b5e795e9msha6da9abb3a10e70p105f08jsnb021b319baea',\r\n              'X-RapidAPI-Host': 'chatgpt-gpt4-ai-chatbot.p.rapidapi.com'\r\n            },\r\n            body: {\r\n              query: 'How to become rich?'\r\n            },\r\n            json: true\r\n        };\r\n        \r\n        request(options, function (error, response, body) {\r\n            if (error) {\r\n                console.error('Error:', error);\r\n                return res.status(500).send('Error occurred');\r\n            }\r\n            console.log(body);\r\n            res.send(body); // Sends a response back to the client\r\n        });\r\n\r\n        //API Link below\r\n        //https://rapidapi.com/nextbaseapp/api/chatgpt-gpt4-ai-chatbot\r\n    });\r\n\r\n    app.post('/sendQuery', function (req, res) {\r\n        const userQuery = req.body.userQuery;\r\n        let conversationId = req.body.conversationId; // Retrieves the conversationId if it exists\r\n    \r\n        const options = {\r\n            method: 'POST',\r\n            url: 'https://chatgpt-gpt4-ai-chatbot.p.rapidapi.com/ask',\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'X-RapidAPI-Key': 'f4b5e795e9msha6da9abb3a10e70p105f08jsnb021b319baea',\r\n              'X-RapidAPI-Host': 'chatgpt-gpt4-ai-chatbot.p.rapidapi.com'\r\n            },\r\n            body: {\r\n              query: userQuery,\r\n              ...(conversationId && { conversationId })\r\n            },\r\n            json: true\r\n        };\r\n    \r\n    \r\n        request(options, function (error, response, body) {\r\n            if (error) {\r\n                console.error('Error:', error);\r\n                return res.status(500).send('Error occurred');\r\n            }\r\n            console.log(\"API Response:\", body);\r\n            // Renders the template with the response, userQuery, and conversationId\r\n            res.render('index', { \r\n                webApp: webApp, // or just the webApp\r\n                responseuserQuery: body.response, \r\n                 userQuery, \r\n                conversationId: body.conversationId || req.body.conversationId\r\n            });\r\n        });\r\n    });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}